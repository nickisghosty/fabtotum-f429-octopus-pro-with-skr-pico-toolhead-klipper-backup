# This file contains common pin mappings for the BigTreeTech Octopus
# and Octopus Pro boards. To use this config, start by identifying the
# micro-controller on the board - it may be an STM32F446, STM32F429,
# or an STM32H723.  Select the appropriate micro-controller in "make
# menuconfig" and select "Enable low-level configuration options". For
# STM32F446 boards the firmware should be compiled with a "32KiB
# bootloader" and a "12MHz crystal" clock reference. For STM32F429
# boards use a "32KiB bootloader" and an "8MHz crystal". For STM32H723
# boards use a "128KiB bootloader" and a "25Mhz crystal".

# See docs/Config_Reference.md for a description of parameters.
[display_status]
[virtual_sdcard]
path: ~/printer_data/gcodes
[pause_resume]
[include macros]
[include leds.cfg]
[include timelapse.cfg]
[gcode_arcs]
###################################################################
# Script Name	 : "screen.cfg"                                                                                         
# Description	 : Ender 3 Pro default (st7920) Full Graphic Smart Controller
# Args           :                                                                                           
# Author       	 : Alexander Koehler                                              
# Email          : software@akks.de 
# Date           : 25.12.2021                                    
###################################################################



# st7920 LCD displays.
[display]
lcd_type: st7920
cs_pin: EXP1_7
sclk_pin: EXP1_6
sid_pin: EXP1_8
encoder_pins: ^EXP1_5, ^EXP1_3
click_pin: ^!EXP1_2

[output_pin beeper]
pin: EXP1_1
pwm: True
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
value: 0
#   Silent at power on, set to 1 if active low.
#shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.
#resolution: 1.0
# Driver0
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
microsteps: 16
rotation_distance: 44.088612600249924
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_endstop: 0
position_max: 214
homing_speed: 50
homing_retract_dist: 0

# Driver1
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
microsteps: 16
rotation_distance: 44.088612600249924
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_endstop: 0
position_max: 236
homing_speed: 50
homing_retract_dist: 0

#river2
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
microsteps: 16
rotation_distance: 1.5000002343750365
endstop_pin: PG10
position_endstop: 233.35
position_max: 233.35
homing_positive_dir: true
homing_speed: 150

[safe_z_home]
home_xy_position: 100,100
#   A X, Y coordinate (e.g. 100, 100) where the Z homing should be
#   performed. This parameter must be provided.
#speed: 50.0
#   Speed at which the toolhead is moved to the safe Z home
#   coordinate. The default is 50 mm/s
#z_hop:
#   Distance (in mm) to lift the Z axis prior to homing. This is
#   applied to any homing command, even if it doesn't home the Z axis.
#   If the Z axis is already homed and the current Z position is less
#   than z_hop, then this will lift the head to a height of z_hop. If
#   the Z axis is not already homed the head is lifted by z_hop.
#   The default is to not implement Z hop.
#z_hop_speed: 15.0
#   Speed (in mm/s) at which the Z axis is lifted prior to homing. The
#   default is 15 mm/s.
#move_to_previous: False
#   When set to True, the X and Y axes are reset to their previous
#   positions after Z axis homing. The default is False.

# Driver3
# The Octopus only has 4 heater outputs which leaves an extra stepper
# This can be used for a second Z stepper, dual_carriage, extruder co-stepper,
# # or other accesory such as an MMU
# [stepper_z]
# step_pin: PG4
# dir_pin: PC1
# enable_pin: PA0
# endstop_pin: PG10
# microsteps: 16
# rotation_distance: 2133.333
# endstop_pin: PG10
# position_endstop: 233.5
# position_max: 233.5
# homing_positive_dir: true
# #...

########################################
# TMC2209 configuration
########################################

[tmc2209 stepper_y]
uart_pin: PC4
diag_pin: ^PG6
run_current: 0.800
stealthchop_threshold:999999
driver_SGTHRS: 45  # 255 is most sensitive value, 0 is least sensitive

[tmc2209 stepper_x]
uart_pin: PD11
diag_pin: ^PG9
run_current: 0.800
stealthchop_threshold: 999999
driver_SGTHRS: 45  # 255 is most sensitive value, 0 is least sensitive

[tmc2209 stepper_z]
uart_pin: PC6
#diag_pin: PG10
run_current: 0.800
stealthchop_threshold: 999999

# [tmc2209 stepper_z]
# uart_pin: PC7
# #diag_pin: PG11
# run_current: 0.650
# stealthchop_threshold: 999999

[tmc2209 extruder]
uart_pin: PC7
run_current: 0.800
stealthchop_threshold: 999999

# [tmc2209 extruder]
# uart_pin: PE4
# run_current: 0.800
# stealthchop_threshold: 999999

#[tmc2209 extruder2]
#uart_pin: PE1
#run_current: 0.800
#stealthchop_threshold: 999999

#[tmc2209 extruder3]
#uart_pin: PD3
#run_current: 0.800
#stealthchop_threshold: 999999
# Driver4
[extruder]
step_pin: PG4
dir_pin: PC1
enable_pin: !PA0
microsteps: 16
rotation_distance: 32.351912650235
nozzle_diameter: 0.50
filament_diameter: 1.750
heater_pin: PA3 # HE0
sensor_pin:  PF4 # T0
sensor_type: EPCOS 100K B57560G104F
#control: pid
#pid_Kp: 15
#pid_Ki: 5
#pid_Kd: 30
min_temp: -50
max_temp: 315


[verify_heater extruder]
max_error: 360
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time:60
#   This controls heater verification during initial heating. Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
#hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. It is rare to customize this
#   value. The default is 5.
heating_gain: 0.5
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.
# # Driver5
# [extruder]
# step_pin: PC13
# dir_pin: PF0
# enable_pin: !PF1
# microsteps: 16
# rotation_distance: 1.0498138991620287
# nozzle_diameter: 0.600
# filament_diameter: 1.750
# heater_pin: PA3 # HE0
# sensor_pin:  PF4 # T0
# sensor_type: EPCOS 100K B57560G104F
# #control: pid
# #pid_Kp: 15
# #pid_Ki: 5
# #pid_Kd: 30
# min_temp: -50
# max_temp: 315
#...

[verify_heater heater_bed]
max_error: 360
#   The maximum "cumulative temperature error" before raising an
#   error. Smaller values result in stricter checking and larger
#   values allow for more time before an error is reported.
#   Specifically, the temperature is inspected once a second and if it
#   is close to the target temperature then an internal "error
#   counter" is reset; otherwise, if the temperature is below the
#   target range then the counter is increased by the amount the
#   reported temperature differs from that range. Should the counter
#   exceed this "max_error" then an error is raised. The default is
#   120.
check_gain_time:60
#   This controls heater verification during initial heating. Smaller
#   values result in stricter checking and larger values allow for
#   more time before an error is reported. Specifically, during
#   initial heating, as long as the heater increases in temperature
#   within this time frame (specified in seconds) then the internal
#   "error counter" is reset. The default is 20 seconds for extruders
#   and 60 seconds for heater_bed.
#hysteresis: 5
#   The maximum temperature difference (in Celsius) to a target
#   temperature that is considered in range of the target. This
#   controls the max_error range check. It is rare to customize this
#   value. The default is 5.
heating_gain: 0.5
#   The minimum temperature (in Celsius) that the heater must increase
#   by during the check_gain_time check. It is rare to customize this
#   value. The default is 2.
# # Driver5
# [extruder]
# step_pin: PC13
# dir_pin: PF0
# enable_pin: !PF1
# microsteps: 16
# rotation_distance: 1.0498138991620287
# nozzle_diameter: 0.600
# filament_diameter: 1.750
# heater_pin: PA3 # HE0
# sensor_pin:  PF4 # T0
# sensor_type: EPCOS 100K B57560G104F
# #control: pid
# #pid_Kp: 15
# #pid_Ki: 5
# #pid_Kd: 30
# min_temp: -50
# max_temp: 315
#...


# Driver6
#[extruder2]
#step_pin: PE2
#dir_pin: PE3
#enable_pin: !PD4
#heater_pin: PB10 # HE2
#sensor_pin: PF6 # T2
#...

# Driver7
#[extruder3]
#step_pin: PE6
#dir_pin: PA14
#enable_pin: !PE0
#heater_pin: PB11 # HE3
#sensor_pin: PF7 # T3
#...


[heater_bed]
heater_pin: PA1
sensor_pin: PF3 # TB
sensor_type: ATC Semitec 104GT-2
#control: watermark
min_temp: -50
max_temp: 130

[fan]
pin:PD13
hardware_pwm: True
cycle_time: 0.00004 # 25 kHz
#   Output pin controlling the fan. This parameter must be provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   pin may be set to. The value 1.0 allows the pin to be set fully
#   enabled for extended periods, while a value of 0.5 would allow the
#   pin to be enabled for no more than half the time. This setting may
#   be used to limit the total power output (over extended periods) to
#   the fan. If this value is less than 1.0 then fan speed requests
#   will be scaled between zero and max_power (for example, if
#   max_power is .9 and a fan speed of 80% is requested then the fan
#   power will be set to 72%). The default is 1.0.
#shutdown_speed: 0
#   The desired fan speed (expressed as a value from 0.0 to 1.0) if
#   the micro-controller software enters an error state. The default
#   is 0.
#cycle_time: 0.010
#   The amount of time (in seconds) for each PWM power cycle to the
#   fan. It is recommended this be 10 milliseconds or greater when
#   using software based PWM. The default is 0.010 seconds.
#hardware_pwm: False
#   Enable this to use hardware PWM instead of software PWM. Most fans
#   do not work well with hardware PWM, so it is not recommended to
#   enable this unless there is an electrical requirement to switch at
#   very high speeds. When using hardware PWM the actual cycle time is
#   constrained by the implementation and may be significantly
#   different than the requested cycle_time. The default is False.
#kick_start_time: 0.100
#   Time (in seconds) to run the fan at full speed when either first
#   enabling or increasing it by more than 50% (helps get the fan
#   spinning). The default is 0.100 seconds.
#off_below: 0.0
#   The minimum input speed which will power the fan (expressed as a
#   value from 0.0 to 1.0). When a speed lower than off_below is
#   requested the fan will instead be turned off. This setting may be
#   used to prevent fan stalls and to ensure kick starts are
#   effective. The default is 0.0.

#   This setting should be recalibrated whenever max_power is adjusted.
#   To calibrate this setting, start with off_below set to 0.0 and the
#   fan spinning. Gradually lower the fan speed to determine the lowest
#   input speed which reliably drives the fan without stalls. Set
#   off_below to the duty cycle corresponding to this value (for
#   example, 12% -> 0.12) or slightly higher.
#tachometer_pin:
#   Tachometer input pin for monitoring fan speed. A pullup is generally
#   required. This parameter is optional.
#tachometer_ppr: 2
#   When tachometer_pin is specified, this is the number of pulses per
#   revolution of the tachometer signal. For a BLDC fan this is
#   normally half the number of poles. The default is 2.
#tachometer_poll_interval: 0.0015
#   When tachometer_pin is specified, this is the polling period of the
#   tachometer pin, in seconds. The default is 0.0015, which is fast
#   enough for fans below 10000 RPM at 2 PPR. This must be smaller than
#   30/(tachometer_ppr*rpm), with some margin, where rpm is the
#   maximum speed (in RPM) of the fan.
#enable_pin:PD12
#   Optional pin to enable power to the fan. This can be useful for fans
#   with dedicated PWM inputs. Some of these fans stay on even at 0% PWM
#   input. In such a case, the PWM pin can be used normally, and e.g. a
#   ground-switched FET(standard fan pin) can be used to control power to
#   the fan.

[controller_fan my_controller_fan]
pin: PD14
max_power: 1

#hardware_pwm: True
#cycle_time: 0.00004 # 25 kHz
[heater_fan fan2]
pin: PD12
#cycle_time: 0.00004 # 25 kHz
#Max_power:0.5
#shutdown_speed:
#cycle_time:
#hardware_pwm:
#kick_start_time:
#off_below:
#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:
#hardware_pwm: True#   See the "fan" section for a description of the above parameters.
heater: extruder
#   Name of the config section defining the heater that this fan is
#   associated with. If a comma separated list of heater names is
#   provided here, then the fan will be enabled when any of the given
#   heaters are enabled. The default is "extruder".
heater_temp: 50.0
#   A temperature (in Celsius) that the heater must drop below before
#   the fan is disabled. The default is 50 Celsius.
fan_speed: 1
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when its associated heater is enabled. The default
#   is 1.0


#[heater_fan fan3]
#pin: PD13

#[heater_fan fan4]
#pin: PD14

#[controller_fan fan5]
#pin: PD15

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f429xx_220031001450304738313820-if00
# CAN bus is also available on this board

[printer]
kinematics: corexy
max_velocity: 300
max_accel: 3000
max_accel_to_decel: 1500
max_z_velocity: 5
max_z_accel: 100



[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=PC5

# See the sample-lcd.cfg file for definitions of common LCD displays.

# A [probe] section can be defined instead with a pin: setting identical
# to the sensor_pin: for a bltouch
#[bltouch]
#sensor_pin: PB7
#control_pin: PB6
#z_offset: 0
[probe]
pin: PB7
z_offset: 0

[mpu9250]
i2c_address:104
i2c_mcu: mcu
i2c_bus: i2c1a
#i2c_software_scl_pin: PB8
#i2c_software_sda_pin: PB9
#i2c_speed: 400000
#   See the "common I2C settings" section for a description of the
#   above parameters. The default "i2c_speed" is 400000.
#axes_map: x, y, z
#   See the "adxl345" section for information on this parameter.
[resonance_tester]
probe_points: 100,100,100
#   A list of X, Y, Z coordinates of points (one point per line) to test
#   resonances at. At least one point is required. Make sure that all
#   points with some safety margin in XY plane (~a few centimeters)
#   are reachable by the toolhead.
accel_chip: mpu9250
#   A name of the accelerometer chip to use for measurements. If
#   adxl345 chip was defined without an explicit name, this parameter
#   can simply reference it as "accel_chip: adxl345", otherwise an
#   explicit name must be supplied as well, e.g. "accel_chip: adxl345
#   my_chip_name". Either this, or the next two parameters must be
#   set.
#accel_chip_x:
#accel_chip_y:
#   Names of the accelerometer chips to use for measurements for each
#   of the axis. Can be useful, for instance, on bed slinger printer,
#   if two separate accelerometers are mounted on the bed (for Y axis)
#   and on the toolhead (for X axis). These parameters have the same
#   format as 'accel_chip' parameter. Only 'accel_chip' or these two
#   parameters must be provided.
#max_smoothing:
#   Maximum input shaper smoothing to allow for each axis during shaper
#   auto-calibration (with 'SHAPER_CALIBRATE' command). By default no
#   maximum smoothing is specified. Refer to Measuring_Resonances guide
#   for more details on using this feature.
#min_freq: 5
#   Minimum frequency to test for resonances. The default is 5 Hz.
#max_freq: 133.33
#   Maximum frequency to test for resonances. The default is 133.33 Hz.
#accel_per_hz: 75
#   This parameter is used to determine which acceleration to use to
#   test a specific frequency: accel = accel_per_hz * freq. Higher the
#   value, the higher is the energy of the oscillations. Can be set to
#   a lower than the default value if the resonances get too strong on
#   the printer. However, lower values make measurements of
#   high-frequency resonances less precise. The default value is 75
#   (mm/sec).
#hz_per_sec: 1
#   Determines the speed of the test. When testing all frequencies in
#   range [min_freq, max_freq], each second the frequency increases by
#   hz_per_sec. Small values make the test slow, and the large values
#   will decrease the precision of the test. The default value is 1.0
#   (Hz/sec == sec^-2).
[input_shaper]
shaper_freq_x: 120
#   A frequency (in Hz) of the input shaper for X axis. This is
#   usually a resonance frequency of X axis that the input shaper
#   should suppress. For more complex shapers, like 2- and 3-hump EI
#   input shapers, this parameter can be set from different
#   considerations. The default value is 0, which disables input
#   shaping for X axis.
shaper_freq_y: 60
#   A frequency (in Hz) of the input shaper for Y axis. This is
#   usually a resonance frequency of Y axis that the input shaper
#   should suppress. For more complex shapers, like 2- and 3-hump EI
#   input shapers, this parameter can be set from different
#   considerations. The default value is 0, which disables input
#   shaping for Y axis.
shaper_type: mzv
#   A type of the input shaper to use for both X and Y axes. Supported
#   shapers are zv, mzv, zvd, ei, 2hump_ei, and 3hump_ei. The default
#   is mzv input shaper.
#shaper_type_x:
#shaper_type_y:
#   If shaper_type is not set, these two parameters can be used to
#   configure different input shapers for X and Y axes. The same
#   values are supported as for shaper_type parameter.
#damping_ratio_x: 0.1
#damping_ratio_y: 0.1
#   Damping ratios of vibrations of X and Y axes used by input shapers
#   to improve vibration suppression. Default value is 0.1 which is a
#   good all-round value for most printers. In most circumstances this
#   parameter requires no tuning and should not be changed.

# [neopixel leds]
# pin: PB0
# color_order: GRB
# #chain_count: 3
# chain_count: 16
# initial_RED: 0.0
# initial_GREEN: 0.0
# initial_BLUE: 1.0
# initial_WHITE: 0.0
#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 21.060
#*# pid_ki = 0.672
#*# pid_kd = 165.059
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 67.777
#*# pid_ki = 1.141
#*# pid_kd = 1006.490


